
[{"content":" Introduction # Purpose and Scope # This guide provides an exhaustive, step-by-step tutorial for creating a personal website using the Hugo static site generator and the Blowfish theme, with final deployment and hosting on GitHub Pages. It is designed for a technical user who seeks to understand each step of the process, from configuring a local development environment to establishing a fully automated deployment pipeline. The methodology follows a \u0026ldquo;manual but best-practice\u0026rdquo; approach, utilizing core tools like Git and the Hugo command-line interface directly. This aligns with a preference for transparent, reproducible workflows over abstracted helper scripts, ensuring a deep understanding of the underlying architecture. The instructions prioritize the official, recommended methods for installation and deployment to guarantee long-term stability and maintainability.\nFinal Outcome # By following this guide, a user will first construct and launch a live website at its default github.io address. The guide then details how to point a custom domain (e.g., www.your-domain.com) to this site, resulting in a professional, fully-automated web presence built on Hugo, the Blowfish theme, and GitHub Actions.\nPart 1: Foundational Setup: Preparing Your Ubuntu 24.04 Environment # A correctly configured local environment is the critical first phase that prevents a wide range of future complications. This section details the installation and configuration of the essential tools required for this project on your Ubuntu 24.04 Desktop: Git for version control, GitHub Desktop for a graphical Git interface, Visual Studio Code as your editor, and Hugo for static site generation.\n1.1 Installing and Configuring Your Development Toolkit # This project relies on a specific set of tools working together. The following steps will guide you through installing Git, GitHub Desktop, and Visual Studio Code on your Ubuntu 24.04 system.\n1.1.1 Installing Git # Git is a non-negotiable prerequisite for this project. Its use is mandated by both Hugo and the Blowfish theme for critical functions such as installing the theme as a Git submodule and for deploying the final site to GitHub Pages. [1, 2, 3] On Ubuntu, it is best installed using the native package manager.\nUpdate Package Lists: It is always good practice to first update the local package index. Open a terminal and run sudo apt update. [4]\nInstall Git: Run the following command: sudo apt install git. [1, 4]\nVerify Installation: After the installation completes, run git --version in the terminal to verify its presence and version. [4]\n1.1.2 Installing GitHub Desktop # While Git is a command-line tool, GitHub Desktop provides a graphical user interface that can simplify day-to-day version control tasks. Since there is no official GitHub Desktop client for Linux, we will use a well-regarded community fork by ShiftKey. [5]\nUpdate Packages: Ensure your system\u0026rsquo;s package list is up to date:\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade [5]\nAdd the GPG Key: This key verifies the authenticity of the software packages.\nwget -qO - https://mirror.mwt.me/shiftkey-desktop/gpgkey | gpg --dearmor | sudo tee /etc/apt/keyrings/mwt-desktop.gpg \u0026gt; /dev/null [5]\nAdd the Repository: Add the ShiftKey repository to your system\u0026rsquo;s software sources.\nsudo sh -c \u0026#39;echo \u0026#34;deb [arch=amd64 signed-by=/etc/apt/keyrings/mwt-desktop.gpg] https://mirror.mwt.me/shiftkey-desktop/deb/ any main\u0026#34; \u0026gt; /etc/apt/sources.list.d/mwt-desktop.list\u0026#39; [5]\nUpdate Package List Again: Refresh the package list to include the new repository.\nsudo apt update [5]\nInstall GitHub Desktop: Now, install the application.\nsudo apt install github-desktop [5]\nLaunch the Application: You can now find and launch GitHub Desktop from your applications menu. [5] You will be prompted to log in to your GitHub account.\n1.1.3 Installing Visual Studio Code # Visual Studio Code (VS Code) will serve as your code editor for this project. The recommended installation method for Ubuntu is to use the official Microsoft APT repository, which ensures you receive timely updates. [6]\nUpdate and Install Prerequisites: Ensure your system is up-to-date and has the necessary packages.\nsudo apt update sudo apt install wget gpg apt-transport-https [6]\nImport Microsoft\u0026rsquo;s GPG Key: This step ensures the packages you download are authentic.\nwget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/keyrings/packages.microsoft.gpg \u0026gt; /dev/null [6]\nAdd the VS Code Repository: Create the repository source list file.\necho \u0026#34;deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\u0026#34; | sudo tee /etc/apt/sources.list.d/vscode.list \u0026gt; /dev/null [6]\nUpdate and Install VS Code: Refresh your package list and install the application.\nsudo apt update sudo apt install code [6]\nLaunch VS Code: You can now open VS Code from your applications menu or by typing code in the terminal. [6]\n1.1.4 Initial Git Configuration # After installing Git, a one-time configuration is required to associate a name and email address with all commits. This information is embedded in every change recorded by Git and is essential for proper attribution on platforms like GitHub. [7, 8]\nExecute the following two commands in your terminal, replacing the placeholder text with the actual name and email address:\ngit config --global user.name \u0026#34;\u0026lt;Your Name\u0026gt;\u0026#34; git config --global user.email \u0026#34;\u0026lt;your.email\u0026gt;@example.com\u0026#34; These settings are stored globally and will be used for all Git projects on the local machine. [8]\n1.2 Installing Hugo (The Extended Version) # The Blowfish theme is built with modern web technologies, and to ensure full compatibility and prevent future limitations, it is essential to install the extended version of Hugo. The extended version includes a built-in compiler for Sass, a CSS preprocessor, which is a common dependency in the Hugo ecosystem even if not used directly by the base theme. [2, 9]\nFor Ubuntu, the most reliable way to install and maintain the latest extended version of Hugo is through the Snap package manager. Snap packages are self-contained, easy to install, and update automatically. [10, 11]\nInstallation Command: Open your terminal and run the following command:\nsudo snap install hugo This command installs the latest extended version of Hugo by default. [10, 11]\n1.2.1 Verification # After the installation process is complete, it is crucial to verify that the correct version of Hugo is installed and accessible. Open a new terminal window and run the following command:\nhugo version The output should display a recent version number (the Blowfish theme documentation recommends v0.126.3 or newer [2]) and, most importantly, should include the word extended in the description (e.g., hugo v0.128.0-a1b2c3d4 extended linux/amd64 BuildDate...).\nPart 2: Project Initialization: Creating the Hugo Site and Integrating Blowfish # With the necessary tools installed, the next step is to construct the foundational structure of the website. This involves using Hugo to create the project skeleton, initializing it as a Git repository, and integrating the Blowfish theme using the recommended Git submodule method.\n2.1 Scaffolding Your New Hugo Project # The hugo new site command is the standardized starting point for any Hugo project, as it creates a directory structure that the Hugo engine understands and expects. [12]\nA critical step for this specific project is to name the project folder to match the intended GitHub Pages URL. GitHub has a special convention for user websites: a repository named \u0026lt;username\u0026gt;.github.io will be served at the root of that domain. [13] Naming the project correctly from the start aligns the local development environment with the remote deployment target, enabling a simpler, single-repository workflow, which is a modern best practice.\nNavigate to your development directory: Open your terminal and change to the directory where you store your projects (e.g., a Sites or Projects folder).\nCreate the new site: Execute the following command, replacing \u0026lt;username\u0026gt; with your GitHub username:\nhugo new site \u0026lt;username\u0026gt;.github.io Enter the project directory: Immediately navigate into the newly created folder:\ncd \u0026lt;username\u0026gt;.github.io Open in VS Code: You can now open this folder in Visual Studio Code to manage your project files. From the terminal, run:\ncode . This command generates several folders, each with a specific purpose for organizing the website. [12]\nDirectory Purpose archetypes Contains templates for front matter when creating new content files. config Holds the site\u0026rsquo;s configuration files. Modern themes often use a _default subdirectory here. content All of your site\u0026rsquo;s content, such as blog posts and pages, resides here. data Stores data files (e.g., JSON, TOML, YAML) that can be used to populate pages. layouts Contains the HTML templates that define the structure and look of your site. static Stores static assets like images, CSS, and JavaScript files that do not need processing. themes Where themes are placed. Each theme has its own subdirectory. **\n2.2 Initializing the Git Repository # To use a Git-based workflow for managing the theme, the project folder itself must be a Git repository. This allows Git to track not only the project\u0026rsquo;s files but also its dependencies, such as the theme submodule. [12, 14]\nIn the terminal, from the root of the \u0026lt;username\u0026gt;.github.io directory, execute the following command:\ngit init This command creates a hidden .git directory, initializing an empty Git repository in the project folder. [14]\n2.3 Adding the Blowfish Theme via Git Submodule # The user\u0026rsquo;s request for an \u0026ldquo;install without CLI\u0026rdquo; method points toward a preference for a transparent, manual installation process. The best practice for this is using a Git submodule. A submodule is a Git repository embedded inside another parent Git repository. This method links a specific commit of the theme\u0026rsquo;s code to the main project, ensuring that the site build is always repeatable and is not affected by unexpected theme updates until an update is explicitly initiated. [15] This is the recommended installation method in the Blowfish documentation. [2]\nFrom the root of the project directory, run the following command precisely as written:\ngit submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish The -b main flag is an important addition. It instructs Git to track the main branch of the Blowfish theme repository. This means when you update the submodule later, it will pull the latest changes from the theme\u0026rsquo;s main development branch, keeping your site up-to-date with the theme\u0026rsquo;s features and fixes. [2]\nThis command performs two key actions:\nIt clones the Blowfish theme repository from GitHub into the themes/blowfish directory.\nIt creates a .gitmodules file in the project root. This file records the path and URL of the submodule, officially registering it with the parent Git repository. [8]\n2.4 Applying the Blowfish Default Configuration # The Blowfish theme ships with a set of well-structured default configuration files. Using these files as a starting point is essential for the theme to function correctly and provides a clear path for future customization. [2, 16] The process involves replacing the single hugo.toml file generated by Hugo with the theme\u0026rsquo;s more detailed configuration structure.\nDelete the default Hugo config file: In the project root, remove the hugo.toml file. This can be done in the VS Code file explorer or via the terminal: rm hugo.toml\nCreate the new config directory: Hugo\u0026rsquo;s modern configuration system resides in a config directory. Create it and its _default subdirectory using the terminal:\nmkdir -p config/_default Copy the theme\u0026rsquo;s config files: Copy all the .toml files from the theme\u0026rsquo;s configuration directory into the project\u0026rsquo;s new configuration directory.\ncp themes/blowfish/config/_default/*.toml config/_default/ [2]\nCrucial Final Check: Because the theme was installed as a submodule (and not as a Hugo Module), the site\u0026rsquo;s configuration must explicitly declare which theme to use. Open the newly copied config/_default/hugo.toml file in VS Code and ensure the following line is present at the top. If it is commented out or missing, add it [2]:\ntheme = \u0026#34;blowfish\u0026#34; After these steps, the project is correctly structured with the Blowfish theme and its default configurations, ready for personalization.\nPart 3: Configuration and Local Preview # With the project structure and theme in place, the next phase involves personalizing the site\u0026rsquo;s core settings and learning how to use Hugo\u0026rsquo;s powerful local development server to preview changes in real-time.\n3.1 Core Site Configuration (config/_default/hugo.toml) # The config/_default/hugo.toml file contains global settings that are fundamental to the Hugo engine\u0026rsquo;s operation. The most critical of these is the baseURL, which must be set correctly for all generated URLs and assets to resolve properly on the live server. [17]\nOpen the configuration file: Using VS Code, open config/_default/hugo.toml.\nSet the Base URL: Modify the baseURL parameter to match the final deployment URL, replacing \u0026lt;username\u0026gt; with your GitHub username. This value must begin with the protocol and end with a slash.\nbaseURL = \u0026#34;https://\u0026lt;username\u0026gt;.github.io/\u0026#34; Set the Site Title: Change the title parameter to a descriptive name for the website.\ntitle = \u0026#34;Your Website Title\u0026#34; Review Other Settings: This file also contains other important Hugo settings, such as languageCode (which should be set to the primary language of the content, e.g., \u0026quot;en\u0026quot;) and enableRobotsTXT (which should be true to allow search engine crawling).\n3.2 Personalizing the Theme (config/_default/params.toml) # The config/_default/params.toml file is where all theme-specific features are controlled. For a personal website, customizing the author details is a primary first step to personalize the site\u0026rsquo;s appearance and metadata.\nOpen the parameters file: Using VS Code, open config/_default/params.toml.\nConfigure Author Details: Locate the [author] section. Fill in the relevant details for name, headline, and bio. For the image parameter, a path to an image placed in the assets/ directory of your project can be used.\n[author] name = \u0026#34;\u0026lt;Your Name\u0026gt;\u0026#34; image = \u0026#34;img/profile.jpg\u0026#34; # Example path. You will need to create the `assets` folder in your project\u0026#39;s root, create an `img` folder inside it, and then place your profile image there. headline = \u0026#34;Exploring Technology and Development\u0026#34; bio = \u0026#34;A brief biography about you.\u0026#34; links = [ { github = \u0026#34;https://github.com/\u0026lt;username\u0026gt;\u0026#34; }, { linkedin = \u0026#34;https://linkedin.com/in/yourprofile\u0026#34; }, ] Customize Social Links: Within the author.links array, uncomment or add entries for relevant social media profiles. The theme includes icons for many popular services.\n3.3 Running the Local Development Server # One of Hugo\u0026rsquo;s most powerful features is its built-in development server. This command builds the site in memory, launches a local web server, and watches for file changes, automatically rebuilding the site and refreshing the browser whenever a file is saved. This provides an instant feedback loop that dramatically speeds up development. [18]\nStart the server: From the root directory of your project (\u0026lt;username\u0026gt;.github.io), run the following command in the VS Code integrated terminal (Ctrl+ `) or a separate terminal window:\nhugo server Preview the site: The terminal will output a message indicating the server is running and provide a URL, typically http://localhost:1313/. [18] Open this URL in a web browser to see the live preview of the site.\nExperience Live Reloading: With the server still running, make a small change to a configuration file (e.g., change the title in hugo.toml) and save the file. Observe that the terminal registers the change and the website in the browser updates automatically without needing a manual refresh.\nStop the server: To stop the development server, return to the terminal window where it is running and press Ctrl+C.\nThis local server is the primary tool for all content creation and theme customization, allowing for immediate verification of every change.\nPart 4: Creating and Managing Content # A website\u0026rsquo;s structure is defined by its content. This section covers the fundamental workflows for creating two primary types of content in Hugo: a standalone, static page (like an \u0026ldquo;About\u0026rdquo; page) and a chronological blog post. Understanding the distinction is key to organizing a site effectively.\n4.1 Creating a Standalone \u0026ldquo;About\u0026rdquo; Page # A personal website almost universally includes an \u0026ldquo;About\u0026rdquo; page. This serves as a perfect example of creating a top-level, static page that exists outside of a chronological series like a blog.\nGenerate the page file: Use the hugo new command in the terminal to create the content file. For a simple page, creating a markdown file directly in the content directory is the most straightforward approach.\nhugo new content/about.md This command creates a new file at content/about.md.\nAdd content and publish the page: Open content/about.md in VS Code. The file will contain a \u0026ldquo;front matter\u0026rdquo; block at the top, which holds metadata about the page. Add your content below the front matter using Markdown syntax. To make the page visible, you must also change draft = true to draft = false. [17]\nHere is an example of what the complete content/about.md file might look like:\n+++ title = \u0026#34;About Me\u0026#34; date = 2025-07-27T01:50:00-04:00 draft = false +++ Hello! My name is \u0026lt;Your Name\u0026gt;. Welcome to my personal website. ## My Background I am a passionate developer with a background in web technologies. I enjoy building things for the web and exploring new and exciting frameworks. This website serves as a portfolio for my projects and a place to share my thoughts on technology. ## Hobbies and Interests When I\u0026#39;m not coding, I enjoy: * Hiking in nature * Reading science fiction novels * Experimenting with new recipes Feel free to connect with me on the social media platforms linked in the header. 4.2 Adding the \u0026ldquo;About\u0026rdquo; Page to the Navigation Menu # A page is not useful if visitors cannot find it. The next step is to add a link to the newly created \u0026ldquo;About\u0026rdquo; page in the site\u0026rsquo;s main navigation menu.\nOpen the menu configuration: Using VS Code, edit the file config/_default/menus.en.toml. This file controls the menu structure for the English version of the site. [16, 19]\nAdd a new menu entry: Add the following block to the file. The pageRef parameter tells Hugo to link to the content file located at /about, and weight determines its position in the menu (lower numbers appear first).\n[[main]] name = \u0026#34;About\u0026#34; pageRef = \u0026#34;/about\u0026#34; weight = 20 Verify the change: If the local server is running (hugo server), the \u0026ldquo;About\u0026rdquo; link will now appear in the site\u0026rsquo;s header navigation.\n4.3 Writing Your First Blog Post # This workflow demonstrates how to create time-based content, such as blog posts, which are typically organized into a \u0026ldquo;section.\u0026rdquo;\nGenerate the post file: Use the hugo new command again, but this time specify the posts section in the path.\nhugo new content/posts/my-first-post.md This creates a file at content/posts/my-first-post.md, making it part of the \u0026ldquo;posts\u0026rdquo; collection.\nAdd content: Open the new file in VS Code and add content below the front matter. For this example, leave draft = true.\nPreviewing Drafts: By default, the hugo server command does not render draft content. To view drafts, the server must be started with the -D or --buildDrafts flag. Stop the current server (Ctrl+C) and restart it with the new command:\nhugo server -D The new post will now be visible on the site\u0026rsquo;s post listing page.\nFinalize the Post: Once the post is complete and ready for publication, open its file and change the front matter to draft = false. The post will now be included in regular production builds.\nThe folder structure within the content directory directly influences the site\u0026rsquo;s URL structure and the layout templates Hugo applies. Content in the root of content (like about.md) becomes a top-level page, while content in subdirectories (like posts/) becomes part of a section, which can have its own unique listing pages and layouts. This organizational principle is fundamental to managing a Hugo site as it grows.\nPart 5: Automated Deployment to GitHub Pages # This final phase brings the website to life on the public internet. The process uses a modern, automated workflow with GitHub Actions. This approach, known as Continuous Integration/Continuous Deployment (CI/CD), automates the build and deployment process, eliminating manual steps and reducing the potential for error. The workflow is triggered every time a change is pushed to the project\u0026rsquo;s source code repository. [3, 20]\n5.1 Creating the Remote GitHub Repository # The first step is to create a home for the site\u0026rsquo;s source code on GitHub.com. This remote repository will also serve as the hosting platform for the final GitHub Pages site.\nLog in to GitHub: Access your account on github.com.\nCreate a New Repository: Navigate to the \u0026ldquo;New repository\u0026rdquo; page.\nSet the Repository Name: The repository name must be exactly \u0026lt;username\u0026gt;.github.io. This specific naming convention is what enables GitHub User Pages hosting. [13]\nSet Visibility: The repository must be set to Public.\nInitialize the Repository: Crucially, do not initialize the repository with a README, .gitignore, or license file. The repository must be created completely empty to prevent merge conflicts when the existing local project is pushed to it for the first time.\nClick \u0026ldquo;Create repository\u0026rdquo;.\n5.2 Pushing Your Site\u0026rsquo;s Source Code using GitHub Desktop # With the empty remote repository created, the next step is to upload the local Hugo project to it using the GitHub Desktop application. This will publish the entire project source, including the content, configuration files, and the theme submodule.\nAdd Local Repository: Open GitHub Desktop. Go to the File menu and select Add Local Repository.... Navigate to and select your \u0026lt;username\u0026gt;.github.io project folder.\nPublish Repository: After adding the local repository, a \u0026ldquo;Publish repository\u0026rdquo; button will appear in the main panel. Click it.\nConfigure and Publish: In the \u0026ldquo;Publish Repository\u0026rdquo; dialog:\nEnsure the Name is \u0026lt;username\u0026gt;.github.io.\nMake sure the Keep this code private checkbox is unchecked.\nClick the Publish Repository button. GitHub Desktop will now push your local files to the newly created remote repository on GitHub.com.\nFuture Commits: To save and push future changes:\nMake your changes in VS Code and save the files.\nSwitch to GitHub Desktop. Your changes will appear in the \u0026ldquo;Changes\u0026rdquo; tab.\nEnter a summary for your changes in the text box at the bottom left.\nClick the Commit to main button.\nClick the Push origin button at the top of the window to send your committed changes to GitHub.\n5.3 Implementing the GitHub Actions Deployment Workflow # The GitHub Actions workflow is the automation engine. It is defined in a YAML file that instructs GitHub on how to build and deploy the Hugo site whenever new code is pushed. [21]\nCreate the workflow directory: In VS Code, create a new folder structure in the root of your project: .github/workflows.\nCreate the workflow file: Inside the workflows directory, create a new file named hugo.yml. [21]\nAdd the workflow code: Copy and paste the following code into the hugo.yml file. This is the official workflow recommended by the Hugo team, providing a robust and detailed build process.\n# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: [\u0026#34;main\u0026#34;] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.128.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout uses: actions/checkout@v4 with: submodules: recursive - name: Setup Pages id: pages uses: actions/configure-pages@v5 - name: Install Node.js dependencies run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: Build with Hugo env: HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache HUGO_ENVIRONMENT: production run: | hugo \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 Commit and push the workflow file: Save the hugo.yml file. Switch to GitHub Desktop, add a commit message like \u0026ldquo;Update GitHub Actions deployment workflow\u0026rdquo;, and push the changes to origin. Pushing this file will trigger the first run of the Action.\n5.4 Finalizing GitHub Pages Configuration # The final configuration step is to instruct GitHub to use the output from the newly created GitHub Action as the source for the live website.\nNavigate to Repository Settings: On the GitHub repository page, go to the Settings tab.\nSelect Pages: In the left sidebar, click on Pages.\nSet the Source: Under the \u0026ldquo;Build and deployment\u0026rdquo; section, change the Source dropdown from \u0026ldquo;Deploy from a branch\u0026rdquo; to GitHub Actions. [22] This change is saved automatically.\n5.5 Verifying the Live Site # With the workflow configured and pushed, the deployment process is now fully automated.\nMonitor the Action: Navigate to the Actions tab of the GitHub repository. A workflow run, triggered by the last push, should be visible.\nWait for Completion: The workflow will take a minute or two to complete. A successful run will be indicated by a green checkmark. If there is a red \u0026ldquo;X\u0026rdquo;, it indicates a failure, and the logs can be inspected to diagnose the problem.\nVisit the Live Site: Once the Action has completed successfully, navigate to your site at https://\u0026lt;username\u0026gt;.github.io. The fully deployed website should be visible. Note that it can sometimes take a few minutes for the site to become available after the very first successful deployment.\nFrom this point forward, the development workflow is simplified to a single loop: make changes locally in VS Code, commit and push them with GitHub Desktop, and GitHub Actions will handle the rest, automatically building and deploying the updated site.\nPart 6: Advanced Blowfish Configuration # The Blowfish theme offers a vast array of customization options beyond the basic setup. Users are encouraged to explore the official theme documentation to learn about features such as alternative color schemes, multiple homepage layouts, advanced shortcodes, and custom partials for adding services like analytics or comments. [16, 23] This section provides an overview of how to approach these advanced customizations.\n6.1 Customizing Color Schemes # Blowfish includes several pre-built color schemes and makes it straightforward to create your own. [24]\nApplying a Built-in Scheme: To change the theme, open config/_default/params.toml and set the colorScheme parameter to one of the available options, such as avocado, fire, ocean, or noir. [16, 24]\nCreating a Custom Scheme: To create a new scheme, you can add a new CSS file in the assets/css/schemes/ directory of your project. For example, creating assets/css/schemes/my-scheme.css and then setting colorScheme = \u0026quot;my-scheme\u0026quot; in params.toml will apply your custom styles. This file should define CSS variables for the theme\u0026rsquo;s color palette, which you can model after the theme\u0026rsquo;s existing scheme files. [25]\n6.2 Exploring Homepage Layouts # You can significantly alter the appearance of your homepage by choosing from several available layouts. [2, 26] This is controlled by the homepage.layout setting in config/_default/params.toml. [16]\nprofile: The default layout, ideal for personal websites and blogs.\nhero: Displays author information along with markdown content from your _index.md file.\ncard: A simple layout that shows an image and author details.\nbackground: Features a full-screen background image.\ncustom: For complete control, this option allows you to provide your own template. To use it, you must create a file at layouts/partials/home/custom.html where you can define the entire homepage structure with your own HTML and Hugo templating. [27]\n6.3 Utilizing Shortcodes # Shortcodes are snippets inside your content files that Hugo renders using a predefined template, allowing you to extend Markdown\u0026rsquo;s capabilities. Blowfish includes a number of custom shortcodes for things like alerts, icons, and more complex layouts that are not possible with standard Markdown. [16, 28]\nHere are a few of the most common and useful shortcodes:\nAlerts: These are perfect for drawing attention to important information. You can specify different colors for different contexts (e.g., info, warning, danger).\n**Warning!** This action is destructive! 6.4 Extending with Custom Partials # One of the most powerful features of Hugo is its file lookup order, which allows you to override any theme file without modifying the original theme source. This makes updates seamless while giving you full control. [25] You can use this to add custom partials for services like analytics or comments.\nAdding Custom Analytics: If you want to use an analytics provider not built into the theme, you can create a file at layouts/partials/extend-head.html. Any HTML, such as a tracking script, placed in this file will be automatically injected into the \u0026lt;head\u0026gt; section of every page. [27]\nAdding a Comment System: To add a comment system like Giscus or Commento, create a file at layouts/partials/comments.html and paste in the necessary code provided by the service. To enable it, you must set showComments = true in your params.toml or in the front matter of individual articles. [27]\nPart 7: A Detailed Guide to Connecting Your Custom Domain with Cloudflare and GitHub Pages # Connecting a custom domain involves coordinating settings between your Hugo project, GitHub, and your DNS provider (Cloudflare). This guide will configure www.your-domain.com as the primary address, which is a common best practice.\n7.1 Update Your Project and GitHub Repository # First, we need to inform both your Hugo project and your GitHub repository about the new custom domain.\n7.1.1 Create a CNAME File in Your Hugo Project # GitHub Pages uses a file named CNAME to identify the custom domain. Placing this file in your static folder ensures it\u0026rsquo;s correctly copied to the root of your site during every build. [30]\nIn VS Code, create a new file directly inside the static folder.\nName the file CNAME (all uppercase, no file extension).\nInside this file, add only one line of text: your custom domain with the www subdomain.\nwww.your-domain.com Note: Using www is recommended for greater DNS flexibility. GitHub will automatically handle redirecting the apex domain (your-domain.com) to the www version. [31]\n7.1.2 Update Your Hugo baseURL # Your Hugo configuration must be updated to use the new custom domain for all generated links and assets to work correctly. [20]\nOpen your Hugo configuration file: config/_default/hugo.toml.\nChange the baseURL to your new custom domain, ensuring it includes the https:// protocol and a trailing slash.\nbaseURL = \u0026#34;https://www.your-domain.com/\u0026#34; 7.1.3 Commit and Push Your Changes # Save both the new CNAME file and the updated hugo.toml. Use GitHub Desktop to commit these changes with a message like \u0026ldquo;Configure custom domain\u0026rdquo; and push them to your main branch.\n7.2 Configure DNS Records in Cloudflare # This is the most critical part of the process. You will configure two types of DNS records: A records, which point your root domain (your-domain.com) directly to GitHub\u0026rsquo;s specific server IP addresses, and a CNAME record, which points your www subdomain to your existing GitHub Pages address. This separation is a standard and robust way to configure domains. [32]\n7.2.1 Log in to Cloudflare and Select Your Domain # Go to the Cloudflare dashboard and log in.\nSelect your domain, your-domain.com.\n7.2.2 Navigate to DNS Settings # In the left sidebar, click on the DNS icon to go to the DNS records management page.\n7.2.3 Delete Conflicting Records # To avoid issues, it\u0026rsquo;s best to delete any existing A, AAAA, or CNAME records for your-domain.com (often shown with a name of @) or www.\n7.2.4 Create A Records for the Apex Domain (@) # The apex (or root) domain, your-domain.com, must point directly to GitHub\u0026rsquo;s IP addresses using A records. [32] You will need to create four separate records.\nFor each of the four IP addresses below, click Add record and enter the following:\nType: A\nName: @ (This represents your root domain)\nIPv4 address: Use one of the following IPs for each record [32]:\n185.199.108.153\n185.199.109.153\n185.199.110.153\n185.199.111.153\nProxy status: Click the orange cloud to turn it gray (DNS only). This is a crucial temporary step. GitHub needs to see the traffic coming directly from your domain to verify it and issue an SSL certificate. [33]\nClick Save.\nRepeat this process until you have four A records, one for each IP address.\n7.2.5 Create a CNAME Record for the www Subdomain # Now, we\u0026rsquo;ll configure the www subdomain.\nClick Add record.\nEnter the following:\nType: CNAME\nName: www\nTarget: \u0026lt;username\u0026gt;.github.io\nProxy status: Again, ensure this is set to DNS only (gray cloud) for now.\nClick Save.\n7.3 Finalize GitHub and Cloudflare Configuration # Now we will tie everything together and enable security features.\n7.3.1 Configure the Custom Domain in GitHub # Go back to your repository on GitHub.\nNavigate to Settings \u0026gt; Pages.\nIn the \u0026ldquo;Custom domain\u0026rdquo; section, type www.your-domain.com and click Save.\nGitHub will perform a DNS check. This may take a few minutes to a few hours to complete. Once successful, you will see a message indicating your site is live at the new address.\n7.3.2 Enforce HTTPS on GitHub # Once the DNS check is successful, the Enforce HTTPS option will become available. Check this box to ensure all traffic to your site is secure. [34] If this option is grayed out, wait a bit longer. Removing and re-adding the custom domain in the GitHub settings can sometimes speed up the certificate provisioning process.\n7.3.3 Set SSL/TLS Encryption Mode in Cloudflare # For the most secure connection, configure Cloudflare to encrypt traffic all the way to GitHub\u0026rsquo;s servers.\nIn your Cloudflare dashboard, go to the SSL/TLS section.\nUnder the \u0026ldquo;Overview\u0026rdquo; tab, set your SSL/TLS encryption mode to Full (strict). [35]\n7.3.4 Enable Cloudflare\u0026rsquo;s Proxy # Now that GitHub has verified your domain, you can enable Cloudflare\u0026rsquo;s performance and security features.\nGo back to the DNS settings page in Cloudflare.\nFor each of the five records you created, click the gray cloud under \u0026ldquo;Proxy status\u0026rdquo; to turn it orange (Proxied). [33]\nYour site is now fully configured. Visitors should now be able to access your site at https://www.your-domain.com.\nPart 8: Conclusion and Future Exploration # Summary of Achievements # This guide has provided a comprehensive walkthrough of the entire process for establishing a modern, personal website. A local development environment was configured on an Ubuntu 24.04 Desktop with Git, GitHub Desktop, VS Code, and the extended version of Hugo. A new Hugo project was created and integrated with the powerful Blowfish theme using a Git submodule for maintainable versioning. The site was personalized with core configuration and content, including a static \u0026ldquo;About\u0026rdquo; page and a blog post. A detailed guide for connecting a custom domain using Cloudflare was provided. Finally, and most significantly, a professional CI/CD pipeline was implemented using GitHub Actions, enabling fully automated, hands-off deployments directly to GitHub Pages. The result is a live, functional website at https://www.your-domain.com built on a robust and scalable foundation.\nFuture Exploration # The setup detailed in this guide is a complete and production-ready starting point, but it also opens the door to further customization and learning. The following areas represent logical next steps for expanding upon this foundation:\nDeeper Hugo Concepts: This tutorial has covered the fundamentals of Hugo\u0026rsquo;s content management. To unlock the full power of the platform, further exploration of core Hugo concepts is recommended. Key topics include taxonomies (for advanced content organization like tags and categories), shortcodes (for creating reusable content snippets within Markdown), and a deeper dive into Hugo\u0026rsquo;s template lookup order and page bundles. Mastering these concepts allows for the creation of highly complex and feature-rich websites. [36] References # [1] Hugo Documentation. (n.d.). Install Git. Retrieved July 27, 2025, from https://gohugo.io/installation/git/\n[2] Blowfish Theme Documentation. (n.d.). Installation. Retrieved July 27, 2025, from https://blowfish.page/docs/installation/\n[3] GitHub Docs. (n.d.). About GitHub Pages. Retrieved July 27, 2025, from https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages\n[4] Ubuntu Community Help Wiki. (2022, November 2). AptGet/Howto. Retrieved July 27, 2025, from https://help.ubuntu.com/community/AptGet/Howto\n[5] GitHub Desktop Community. (n.d.). shiftkey/desktop repository. Retrieved July 27, 2025, from https://github.com/shiftkey/desktop\n[6] Visual Studio Code Documentation. (n.d.). Running Visual Studio Code on Linux. Retrieved July 27, 2025, from https://code.visualstudio.com/docs/setup/linux\n[7] GitHub Docs. (n.d.). Setting your username in Git. Retrieved July 27, 2025, from https://docs.github.com/en/get-started/getting-started-with-git/setting-your-username-in-git\n[8] Chacon, S., \u0026amp; Straub, B. (2014). Pro Git (2nd ed.). Apress. https://git-scm.com/book/en/v2\n[9] Hugo Documentation. (n.d.). Prerequisites. Retrieved July 27, 2025, from https://gohugo.io/getting-started/prerequisites/\n[10] Hugo Documentation. (n.d.). Install Hugo on Linux. Retrieved July 27, 2025, from https://gohugo.io/installation/linux/#snap\n[11] Canonical Ltd. (n.d.). Install Hugo for Linux using the Snap Store. Retrieved July 27, 2025, from https://snapcraft.io/hugo\n[12] Hugo Documentation. (n.d.). Quick Start. Retrieved July 27, 2025, from https://gohugo.io/getting-started/quick-start/\n[13] GitHub Docs. (n.d.). About GitHub Pages - Types of GitHub Pages sites. Retrieved July 27, 2025, from https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#types-of-github-pages-sites\n[14] Chacon, S., \u0026amp; Straub, B. (2014). Pro Git (2nd ed.). Apress. Chapter 2.1: Git Basics - Getting a Git Repository. https://git-scm.com/book/en/v2\n[15] Chacon, S., \u0026amp; Straub, B. (2014). Pro Git (2nd ed.). Apress. Chapter 7.11: Git Tools - Submodules. https://git-scm.com/book/en/v2\n[16] Blowfish Theme Documentation. (n.d.). Configuration. Retrieved July 27, 2025, from https://blowfish.page/docs/configuration/\n[17] Hugo Documentation. (n.d.). Front Matter. Retrieved July 27, 2025, from https://gohugo.io/content-management/front-matter/\n[18] Hugo Documentation. (n.d.). Basic Usage. Retrieved July 27, 2025, from https://gohugo.io/getting-started/usage/#development-server\n[19] Hugo Documentation. (n.d.). Menus. Retrieved July 27, 2025, from https://gohugo.io/content-management/menus/\n[20] Hugo Documentation. (n.d.). Hosting on GitHub Pages. Retrieved July 27, 2025, from https://gohugo.io/hosting-and-deployment/hosting-on-github/\n[21] GitHub Docs. (n.d.). Workflow syntax for GitHub Actions. Retrieved July 27, 2025, from https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions\n[22] GitHub Docs. (n.d.). Configuring a publishing source for your GitHub Pages site. Retrieved July 27, 2025, from https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site\n[23] Blowfish Theme Documentation. (n.d.). Getting Started. Retrieved July 27, 2025, from https://blowfish.page/docs/getting-started/\n[24] Blowfish Theme Documentation. (n.d.). Color Schemes. Retrieved July 27, 2025, from https://blowfish.page/docs/configuration/#color-schemes\n[25] Blowfish Theme Documentation. (n.d.). Advanced Customisation - Custom CSS. Retrieved July 27, 2025, from https://blowfish.page/docs/advanced-customisation/#custom-css\n[26] Blowfish Theme Documentation. (n.d.). Homepage Layout. Retrieved July 27, 2025, from https://blowfish.page/docs/homepage-layout/\n[27] Blowfish Theme Documentation. (n.d.). Advanced Customisation - Partials. Retrieved July 27, 2025, from https://blowfish.page/docs/advanced-customisation/#partials\n[28] Blowfish Theme Documentation. (n.d.). Shortcodes. Retrieved July 27, 2_025, from https://blowfish.page/docs/shortcodes/\n[29] Blowfish Theme Documentation. (n.d.). Shortcodes - Alert. Retrieved July 27, 2025, from https://blowfish.page/docs/shortcodes/#alert\n[30] GitHub Docs. (n.d.). Managing a custom domain for your GitHub Pages site. Retrieved July 27, 2025, from https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site\n[31] GitHub Docs. (n.d.). About custom domains and GitHub Pages. Retrieved July 27, 2025, from https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages\n[32] Cloudflare Docs. (n.d.). Manage DNS records. Retrieved July 27, 2025, from https://developers.cloudflare.com/dns/manage-dns-records/\n[33] Cloudflare Docs. (n.d.). Proxied DNS records. Retrieved July 27, 2025, from https://developers.cloudflare.com/dns/manage-dns-records/reference/proxied-dns-records/\n[34] GitHub Docs. (n.d.). Securing your GitHub Pages site with HTTPS. Retrieved July 27, 2025, from https://docs.github.com/en/pages/getting-started-with-github-pages/securing-your-github-pages-site-with-https\n[35] Cloudflare Docs. (n.d.). SSL/TLS encryption modes. Retrieved July 27, 2025, from https://developers.cloudflare.com/ssl/origin-configuration/ssl-modes/\n[36] Hugo Documentation. (n.d.). Content Management. Retrieved July 27, 2025, from https://gohugo.io/content-management/\n","date":"27 July 2025","externalUrl":null,"permalink":"/posts/hugo-blowfish-github-guide/","section":"Posts","summary":"Step-by-step guide to building a Hugo website using the Blowfish theme and deploying it on GitHub Pages.","title":"A Guide to Building and Deploying a Hugo Website","type":"posts"},{"content":"","date":"27 July 2025","externalUrl":null,"permalink":"/tags/blowfish/","section":"Tags","summary":"","title":"Blowfish","type":"tags"},{"content":"","date":"27 July 2025","externalUrl":null,"permalink":"/tags/deployment/","section":"Tags","summary":"","title":"Deployment","type":"tags"},{"content":"","date":"27 July 2025","externalUrl":null,"permalink":"/tags/github/","section":"Tags","summary":"","title":"Github","type":"tags"},{"content":"","date":"27 July 2025","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"","date":"27 July 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"27 July 2025","externalUrl":null,"permalink":"/","section":"Russell Morefield","summary":"","title":"Russell Morefield","type":"page"},{"content":"","date":"27 July 2025","externalUrl":null,"permalink":"/tags/static-site/","section":"Tags","summary":"","title":"Static Site","type":"tags"},{"content":"","date":"27 July 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"26 July 2025","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"26 July 2025","externalUrl":null,"permalink":"/tags/security/","section":"Tags","summary":"","title":"Security","type":"tags"},{"content":"","date":"26 July 2025","externalUrl":null,"permalink":"/tags/ssh/","section":"Tags","summary":"","title":"SSH","type":"tags"},{"content":"A collection of guides and scripts for securing and managing SSH configurations, keys, and connections.\n🔐 1. Secure Root Login with Key-Only Authentication # Purpose:\nEnhances server security by disabling password-based authentication for the root user. Modifies the SSH daemon configuration (sshd_config) to permit root login only via public key authentication. This protects your server from brute-force password attacks.\n⚠️ Important Prerequisite:\nYou MUST have SSH key-based authentication configured and tested for root access before applying this script.\nInstallation and Usage # nano ssh_key_only.sh # Create the script chmod +x ssh_key_only.sh # Make it executable sudo ./ssh_key_only.sh # Run as root Script # #!/bin/bash SSHD_CONFIG=\u0026#34;/etc/ssh/sshd_config\u0026#34; BACKUP_DIR=\u0026#34;/etc/ssh/backups\u0026#34; TIMESTAMP=$(date +\u0026#34;%Y-%m-%d_%H-%M-%S\u0026#34;) BACKUP_FILE=\u0026#34;$BACKUP_DIR/sshd_config_backup_$TIMESTAMP\u0026#34; error_exit() { echo \u0026#34;Error: $1\u0026#34; \u0026gt;\u0026amp;2 exit 1 } if [[ $EUID -ne 0 ]]; then error_exit \u0026#34;This script must be run as root.\u0026#34; fi echo \u0026#34;Creating a backup...\u0026#34; mkdir -p \u0026#34;$BACKUP_DIR\u0026#34; || error_exit \u0026#34;Could not create backup directory.\u0026#34; cp \u0026#34;$SSHD_CONFIG\u0026#34; \u0026#34;$BACKUP_FILE\u0026#34; || error_exit \u0026#34;Could not create backup file.\u0026#34; echo \u0026#34;Backup created at $BACKUP_FILE\u0026#34; echo \u0026#34;Updating sshd_config...\u0026#34; if grep -qE \u0026#34;^\\s*#?\\s*PermitRootLogin\u0026#34; \u0026#34;$SSHD_CONFIG\u0026#34;; then sed -i.bak -E \u0026#34;s/^\\s*#?\\s*PermitRootLogin.*/PermitRootLogin prohibit-password/\u0026#34; \u0026#34;$SSHD_CONFIG\u0026#34; else echo \u0026#34;PermitRootLogin prohibit-password\u0026#34; \u0026gt;\u0026gt; \u0026#34;$SSHD_CONFIG\u0026#34; fi if grep -q \u0026#34;PermitRootLogin prohibit-password\u0026#34; \u0026#34;$SSHD_CONFIG\u0026#34;; then echo \u0026#34;PermitRootLogin updated.\u0026#34; else error_exit \u0026#34;Failed to update setting. Restoring from backup.\u0026#34; cp \u0026#34;$BACKUP_FILE\u0026#34; \u0026#34;$SSHD_CONFIG\u0026#34; fi echo \u0026#34;Restarting SSH service...\u0026#34; if [ -d /run/systemd/system ]; then systemctl restart sshd || error_exit \u0026#34;Failed to restart sshd via systemctl.\u0026#34; else service ssh restart || /etc/init.d/sshd restart || error_exit \u0026#34;Failed to restart sshd.\u0026#34; fi echo \u0026#34;✔️ SSH configured successfully. Root login now requires keys only.\u0026#34; 👤 2. Copying an SSH Key from Root to a New User # ✅ Scenario 1: New User Has sudo Access # mkdir -p /home/$USER/.ssh chmod 700 /home/$USER/.ssh sudo cp /root/.ssh/authorized_keys /home/$USER/.ssh/authorized_keys sudo chown -R $USER:$USER /home/$USER/.ssh sudo chmod 600 /home/$USER/.ssh/authorized_keys 🛑 Scenario 2: New User Has NO sudo Access # NEW_USER=\u0026#34;\u0026lt;your_username\u0026gt;\u0026#34; mkdir -p /home/$NEW_USER/.ssh chmod 700 /home/$NEW_USER/.ssh cp /root/.ssh/authorized_keys /home/$NEW_USER/.ssh/authorized_keys chown -R $NEW_USER:$NEW_USER /home/$NEW_USER/.ssh chmod 600 /home/$NEW_USER/.ssh/authorized_keys 🧱 3. Create a Secure, Key-Only Sudo User # Run all commands as the root user.\n1. Create User and Grant Sudo Access # adduser \u0026lt;newuser\u0026gt; usermod -aG sudo \u0026lt;newuser\u0026gt; # Debian/Ubuntu systems 2. Set Up SSH Key Auth from Root # NEWUSER=\u0026#34;\u0026lt;newuser\u0026gt;\u0026#34; mkdir -p /home/$NEWUSER/.ssh cp /root/.ssh/authorized_keys /home/$NEWUSER/.ssh/authorized_keys chown -R $NEWUSER:$NEWUSER /home/$NEWUSER/.ssh chmod 700 /home/$NEWUSER/.ssh chmod 600 /home/$NEWUSER/.ssh/authorized_keys 3. Enable Passwordless sudo # echo \u0026#34;$NEWUSER ALL=(ALL) NOPASSWD:ALL\u0026#34; \u0026gt; /etc/sudoers.d/01-$NEWUSER-nopasswd chmod 440 /etc/sudoers.d/01-$NEWUSER-nopasswd 4. Harden SSH Configuration # Edit /etc/ssh/sshd_config:\nPermitRootLogin no PasswordAuthentication no Ensure:\nPubkeyAuthentication yes Restart the SSH daemon:\nsystemctl restart sshd Test with:\nssh \u0026lt;newuser\u0026gt;@your_server_ip sudo whoami 💻 4. Transferring an SSH Key from Windows 11 to Ubuntu # Requirements # Windows 11 with OpenSSH installed Key pair generated using ssh-keygen Steps # # From Windows PowerShell scp C:\\Users\\\u0026lt;YourWindowsUser\u0026gt;\\.ssh\\id_rsa.pub \u0026lt;ubuntu_user\u0026gt;@\u0026lt;server_ip\u0026gt;:~/ # Then log into Ubuntu and run: ssh \u0026lt;ubuntu_user\u0026gt;@\u0026lt;server_ip\u0026gt; mkdir -p ~/.ssh cat ~/id_rsa.pub \u0026gt;\u0026gt; ~/.ssh/authorized_keys chmod 700 ~/.ssh chmod 600 ~/.ssh/authorized_keys rm ~/id_rsa.pub 🧹 5. Utility to Clean known_hosts File # Use this script to remove malformed lines from ~/.ssh/known_hosts.\nScript # #!/bin/bash KNOWN_HOSTS_FILE=\u0026#34;$HOME/.ssh/known_hosts\u0026#34; BACKUP_FILE=\u0026#34;$KNOWN_HOSTS_FILE.bak\u0026#34; echo \u0026#34;[*] Backing up known_hosts to $BACKUP_FILE\u0026#34; cp \u0026#34;$KNOWN_HOSTS_FILE\u0026#34; \u0026#34;$BACKUP_FILE\u0026#34; echo \u0026#34;[*] Removing malformed lines...\u0026#34; awk \u0026#39;NF \u0026gt;= 3\u0026#39; \u0026#34;$BACKUP_FILE\u0026#34; \u0026gt; \u0026#34;$KNOWN_HOSTS_FILE\u0026#34; echo \u0026#34;[+] Cleaned known_hosts written.\u0026#34; echo \u0026#34;[!] Original backed up as $BACKUP_FILE\u0026#34; For maximum security and reliability, remember to test each change before closing your root session, especially after altering SSH configurations.\n","date":"26 July 2025","externalUrl":null,"permalink":"/posts/ssh_management_utilities/","section":"Posts","summary":"Guides and scripts for securing and managing SSH configurations, keys, and connections.","title":"SSH Management Utilities","type":"posts"},{"content":"","date":"26 July 2025","externalUrl":null,"permalink":"/tags/utilities/","section":"Tags","summary":"","title":"Utilities","type":"tags"},{"content":"","date":"26 July 2025","externalUrl":null,"permalink":"/tags/windows/","section":"Tags","summary":"","title":"Windows","type":"tags"},{"content":"","date":"25 July 2025","externalUrl":null,"permalink":"/categories/about/","section":"Categories","summary":"","title":"About","type":"categories"},{"content":"","date":"25 July 2025","externalUrl":null,"permalink":"/tags/about/","section":"Tags","summary":"","title":"About","type":"tags"},{"content":"With over 20 years in the technology space, I bridge the critical gap between data analytics and the underlying IT infrastructure. My passion is transforming complex datasets into clear, actionable insights that drive business growth. But unlike many analysts, my perspective is built from the ground up—literally from the server racks to the board room.\nMy journey began in operations and systems management, where I learned firsthand that technology\u0026rsquo;s true value lies in solving tangible business problems. I managed complex inventory systems for Disney vendors, oversaw IT for defense contractors, and honed my skills by implementing workflow improvements that boosted profitability by 10%. This experience taught me to think about business needs first.\n💼 What I Do Today # Today, I channel that foundation into my work as a Data and Systems Analyst, specializing in:\n🔹 Data Analysis \u0026amp; Visualization\nUsing SQL, Tableau, and Grafana to dive deep into data, uncover hidden trends, and build intuitive dashboards that empower leaders to make informed decisions.\n🔹 System \u0026amp; Workflow Automation\nLeveraging Microsoft Power Automate, SharePoint, and n8n to eliminate manual processes, enhance operational efficiency, and build scalable, automated systems.\n🔹 Full-Stack Infrastructure Management\nDrawing on extensive experience with Windows/Linux servers, Proxmox/Hyper-V virtualization, and Docker/Kubernetes containerization to build and maintain reliable, high-performance environments that data-driven organizations depend on.\n🔹 Networking \u0026amp; Security\nImplementing robust security postures using technologies like pfSense, Cisco Meraki, and Cloudflare to protect critical data assets.\n🔧 My Mindset # I am a dedicated continuous learner, always exploring emerging technologies like AI and open-source tools to find new ways to solve challenges. I thrive on untangling complex problems and building solutions that are not only elegant and efficient but also deliver measurable business value.\n","date":"25 July 2025","externalUrl":null,"permalink":"/about/","section":"Russell Morefield","summary":"","title":"About Me","type":"page"},{"content":"","date":"25 July 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]